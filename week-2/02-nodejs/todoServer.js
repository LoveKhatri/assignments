/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const fs = require("fs")

const app = express();

function getAllTodos() {
    fs.readFile("./todos.json", "utf8", async (err, data) => {
        if (err) return err;
        return JSON.parse(data)
    })
}

function getTodo(id) {
    const allTodos = getAllTodos()

    const todo = allTodos.findIndex(t => t.id === id)
    if (!todo || todo === -1) return false
    return todo
}

function validateId(req, res, next) {
    const id = req.params.id;
    if (!id) return res.json({ "msg": "Invalid ID!" })

    if (isNaN(parseInt(id))) return res.json({ "msg": "Invalid ID!" })

    next();
}

function updateTodo(id, data) {
    const allTodos = getAllTodos()
    const index = getTodo(id);

    const newData = allTodos.splice(index, 1, data)

    fs.writeFileSync("./todos.json", newData)
}

app.use(bodyParser.json());

app.get('/todos', async (req, res) => {
    const allTodos = getAllTodos()

    res.json(allTodos)
})
app.get('/todos/:id', validateId, async (req, res) => {
    const allTodos = JSON.parse(require("./todos.json"))

    const id = req.params.id;

    const todo = getTodo(id)
    if (!todo) res.status(404).json({ "msg": "not found" })

    return res.status(200).json(todo)
})

app.post('/todos', async (req, res) => {
    const data = req.body;

})
app.put('/todos/:id', validateId, async (req, res) => {
    const allTodos = getAllTodos()
    const id = req.params.id;
    const body = req.body;

    const index = getTodo(id)


})
app.delete('/todos/:id', async (req, res) => {
    const allTodos = JSON.parse(require('./todos.json'))

    const id = req.params.id;
    if (isNaN(parseInt(id))) {
        return res.status(401).json({ "msg": "Invalid ID!" })
    }

    const todo = allTodos.find(todo => todo.id === id)
    if (!todo) {
        return res.status(404).json({ "msg": "Not Found" })
    }

    const newData = allTodos.splice(allTodos.findIndex(t => t.id === id), 1)

    fs.writeFileSync("./todos.json", newData)
})

app.listen(3000)

module.exports = app;